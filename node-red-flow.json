[{"id":"a60a112bcce56655","type":"tab","label":"Flow 1","disabled":false,"info":"","env":[]},{"id":"19404d9bb6b5650c","type":"function","z":"a60a112bcce56655","name":"parsetag","func":"/*\nRuuvi Gateway to Homeassistant with Node-red\nOtto Vainio (oiv@iki.fi)\n\nGets json from Ruuvi Gateway (https://ruuvi.com/gateway/) using mqtt parsing the message\nand sending a proper home-assistant mqtt discovery config message, state and status messages\n\nTag parsing taken from https://github.com/ojousima/node-red \n\nUsage:\nMQTT-IN node listening to topiv ruuvi/# on your mosquitto broker. If you are running a supervised node-red and\nmosquitto + node-red locally then host should be local = 127.0.0.1\nfrom mqtt-node to json node to convert the payload to json\nfrom json to function node with this code\nfrom this function node next is mqtt-out. Topic will be set in msg.topic\n\n*/\n\n/*\nName your tags here. If name not found then a cleaned (: removed) mac is used as tag name\n*/\nlet tags = {\n    \"AA:BB:CC:DD:EE:FF\":\"Kitchen\",\n    \"CC:BB:CC:DD:EE:FF\":\"Livingroom\",\n    \"DD:BB:CC:DD:EE:FF\":\"Outside\"\n}\n\n// Set tagsAsDevices to true to report each individual tag as own device\nlet tagsAsDevices = true;\n\n\nvar parseMacFromMqttTopic = function(topic) {\n    let macFound = topic.match(/(?:[0-9a-fA-F]:?){12}/g);\n    if (!macFound) {\n        return \"\";\n    } else {\n        return [macFound[0],macFound[1]];\n    }\n}\nvar parseMacFromStatusMqttTopic = function(topic) {\n    let macFound = topic.match(/(?:[0-9a-fA-F]:?){12}/g);\n    if (!macFound) {\n        return \"\";\n    } else {\n        return macFound[0];\n    }\n}\nvar parseMacAddress = function(peripheralUuid) {\n    // Places the colon every 2 characters, but not at the end\n    return peripheralUuid.replace(/.{2}(?!\\b)/g, '$&:');\n}\n\nvar parseRuuviData = function(manufacturerDataString) {\n\n    let formatStart = 4;\n    let formatEnd = 6;\n    let formatRawV1 = \"03\";\n    let formatRawV2 = \"05\";\n    let dataFormat = manufacturerDataString.substring(formatStart, formatEnd);\n    let dataObject = {};\n    switch (dataFormat) {\n        case formatRawV1:\n            dataObject = parseRawV1Ruuvi(manufacturerDataString)\n            break;\n        case formatRawV2:\n            dataObject = parseRawV2Ruuvi(manufacturerDataString)\n            break;\n\n        default:\n            //console.log(\"Unknown dataformat: \" + dataFormat);\n            dataObject = null;\n    }\n\n    return dataObject;\n}\n\n//https://github.com/ruuvi/ruuvi-sensor-protocols\nvar parseRawV1Ruuvi = function(manufacturerDataString) {\n    let humidityStart = 6;\n    let humidityEnd = 8;\n    let temperatureStart = 8;\n    let temperatureEnd = 12;\n    let pressureStart = 12;\n    let pressureEnd = 16;\n    let accelerationXStart = 16;\n    let accelerationXEnd = 20;\n    let accelerationYStart = 20;\n    let accelerationYEnd = 24;\n    let accelerationZStart = 24;\n    let accelerationZEnd = 28;\n    let batteryStart = 28;\n    let batteryEnd = 32;\n\n    let robject = {};\n\n    let humidity = manufacturerDataString.substring(humidityStart, humidityEnd);\n    //console.log(humidity);\n    humidity = parseInt(humidity, 16);\n    humidity /= 2; //scale\n    robject.humidity = humidity;\n\n    let temperatureString = manufacturerDataString.substring(temperatureStart, temperatureEnd);\n    let temperature = parseInt(temperatureString.substring(0, 2), 16); //Full degrees\n    temperature += parseInt(temperatureString.substring(2, 4), 16) / 100; //Decimals\n    if (temperature > 128) { // Ruuvi format, sign bit + value\n        temperature = temperature - 128;\n        temperature = 0 - temperature;\n    }\n    robject.temperature = +temperature.toFixed(2); // Round to 2 decimals, format as a number\n\n    let pressure = parseInt(manufacturerDataString.substring(pressureStart, pressureEnd), 16); // uint16_t pascals\n    pressure += 50000; //Ruuvi format\n    robject.pressure = pressure*10;\n\n    let accelerationX = parseInt(manufacturerDataString.substring(accelerationXStart, accelerationXEnd), 16); // milli-g\n    if (accelerationX > 32767) { accelerationX -= 65536; } //two's complement\n\n    let accelerationY = parseInt(manufacturerDataString.substring(accelerationYStart, accelerationYEnd), 16); // milli-g\n    if (accelerationY > 32767) { accelerationY -= 65536; } //two's complement\n\n    let accelerationZ = parseInt(manufacturerDataString.substring(accelerationZStart, accelerationZEnd), 16); // milli-g\n    if (accelerationZ > 32767) { accelerationZ -= 65536; } //two's complement\n\n    robject.accelerationX = accelerationX/1000;  // as G\n    robject.accelerationY = accelerationY/1000;  // as G\n    robject.accelerationZ = accelerationZ/1000;  // as G\n\n    let battery = parseInt(manufacturerDataString.substring(batteryStart, batteryEnd), 16); // milli-v\n    robject.battery = battery/1000;   // V\n\n    return robject;\n}\n\nvar parseRawV2Ruuvi = function(manufacturerDataString) {\n    let temperatureStart = 6;\n    let temperatureEnd = 10;\n    let humidityStart = 10;\n    let humidityEnd = 14;\n    let pressureStart = 14;\n    let pressureEnd = 18;\n    let accelerationXStart = 18;\n    let accelerationXEnd = 22;\n    let accelerationYStart = 22;\n    let accelerationYEnd = 26;\n    let accelerationZStart = 26;\n    let accelerationZEnd = 30;\n    let powerInfoStart = 30;\n    let powerInfoEnd = 34;\n    let movementCounterStart = 34;\n    let movementCounterEnd = 36;\n    let sequenceCounterStart = 36;\n    let sequenceCounterEnd = 40;\n\n    let robject = {};\n\n    let temperatureString = manufacturerDataString.substring(temperatureStart, temperatureEnd);\n    let temperature = parseInt(temperatureString, 16);\n\n    if ((temperature & 0x8000) > 0) { temperature = temperature - 0x10000; } // two's complement\n\n    robject.temperature = +(temperature / 200).toFixed(2); // 0.005 degrees\n\n    let humidityString = manufacturerDataString.substring(humidityStart, humidityEnd);\n    let humidity = parseInt(humidityString, 16); // 0.0025%\n    robject.humidity = +(humidity / 400).toFixed(2);\n\n    let pressure = parseInt(manufacturerDataString.substring(pressureStart, pressureEnd), 16); // uint16_t pascals\n    pressure += 50000; //Ruuvi format\n    robject.pressure = pressure/100;\n\n    // acceleration values in milli-Gs\n    let accelerationX = parseInt(manufacturerDataString.substring(accelerationXStart, accelerationXEnd), 16); // milli-g\n    if ((accelerationX & 0x8000) > 0) { accelerationX -= 0x10000; } // two's complement\n\n    let accelerationY = parseInt(manufacturerDataString.substring(accelerationYStart, accelerationYEnd), 16); // milli-g\n    if ((accelerationY & 0x8000) > 0) { accelerationY -= 0x10000; } // two's complement\n\n    let accelerationZ = parseInt(manufacturerDataString.substring(accelerationZStart, accelerationZEnd), 16); // milli-g\n    if ((accelerationZ & 0x8000) > 0) { accelerationZ -= 0x10000; } // two's complement\n\n    robject.accelerationX = accelerationX/1000;  // as G\n    robject.accelerationY = accelerationY/1000;  // as G\n    robject.accelerationZ = accelerationZ/1000;  // as G\n\n    let powerInfoString = manufacturerDataString.substring(powerInfoStart, powerInfoEnd);\n    let battery = (parseInt(powerInfoString, 16) >> 5) + 1600; // millivolts > 1600\n//    let txpower = (parseInt(powerInfoString, 16) & 0x001F) - 40; // dB > -40\n    robject.battery = battery/1000;  // Volts\n//    robject.txPower = txpower;\n// previous txpower calculation is wrong. This should be ok\n    let txPower2  = parseInt(powerInfoString, 16) & 0b11111;\n    txPower2 = txPower2 * 2 - 40;\n    robject.txPower = txPower2;\n\n\n    let movementCounterString = manufacturerDataString.substring(movementCounterStart, movementCounterEnd);\n    let movementCounter = parseInt(movementCounterString, 16);\n    robject.movementCounter = movementCounter;\n\n    let sequenceCounterString = manufacturerDataString.substring(sequenceCounterStart, sequenceCounterEnd);\n    let sequenceCounter = parseInt(sequenceCounterString, 16);\n    robject.sequenceCounter = sequenceCounter;\n\n    return robject;\n}\nvar sendCombinedState = function(tmac,data) {\n    csmsg = {};\n    csmsg.topic = `ruuvigw/sensor/ruuvitag_${tmac}/state`\n    csmsg.payload = JSON.stringify(data);\n    node.send(csmsg);\n}\nvar sendState = function(tmac,key,data) {\n    msg.topic = `ruuvigw/sensor/ruuvitag_${tmac}_${key}/state`\n    msg.payload = data;\n    node.send(msg);\n}\n\nvar sendConfig = function(tmac,gmac,tagname,key) {\n    const device_class = {\n    \ttemperature: \"temperature\",\n    \thumidity: \"humidity\",\n    \tpressure: \"pressure\",\n    \taccelerationX: \"\",\n    \taccelerationY: \"\",\n    \taccelerationZ: \"\",\n    \tbattery: \"voltage\",\n    \ttxPower: \"signal_strength\",\n    \tmovementCounter: \"\",\n    \tsequenceCounter: \"\",\n    \tmac: \"\",\n    \trssi: \"\"\n    };\n    const unit_of_measurement = {\n    \ttemperature: \"Â°C\",\n    \thumidity: \"%\",\n    \tpressure: \"hPa\",\n    \taccelerationX: \"G\",\n    \taccelerationY: \"G\",\n    \taccelerationZ: \"G\",\n    \tbattery: \"V\",\n    \ttxPower: \"dBm\",\n    \tmovementCounter: \"\",\n    \tsequenceCounter: \"\",\n    \tmac: \"\",\n    \trssi: \"dBm\"\n    };\n    const state_class = {\n    \ttemperature: \"measurement\",\n    \thumidity: \"measurement\",\n    \tpressure: \"measurement\",\n    \taccelerationX: \"measurement\",\n    \taccelerationY: \"measurement\",\n    \taccelerationZ: \"measurement\",\n    \tbattery: \"measurement\",\n    \ttxPower: \"measurement\",\n    \tmovementCounter: \"\",\n    \tsequenceCounter: \"\",\n    \tmac: \"\",\n    \trssi: \"measurement\"\n    };\n    const icon = {\n    \ttemperature: \"\",\n    \thumidity: \"\",\n    \tpressure: \"\",\n    \taccelerationX: \"mdi:axis-x-arrow\",\n    \taccelerationY: \"mdi:axis-y-arrow\",\n    \taccelerationZ: \"mdi:axis-z-arrow\",\n    \tbattery: \"\",\n    \ttxPower: \"\",\n    \tmovementCounter: \"mdi:gauge\",\n    \tsequenceCounter: \"mdi:gauge\",\n    \tmac: \"\",\n    \trssi: \"\"\n    };\n    const name = {\n    \ttemperature: \"Temperature\",\n    \thumidity: \"Humidity\",\n    \tpressure: \"Pressure\",\n    \taccelerationX: \"Acceleration X\",\n    \taccelerationY: \"Acceleration Y\",\n    \taccelerationZ: \"Acceleration Z\",\n    \tbattery: \"Battery Voltage\",\n    \ttxPower: \"tx Power\",\n    \tmovementCounter: \"Movement Counter\",\n    \tsequenceCounter: \"Mesurement Sequence Number\",\n    \tmac: \"\",\n    \trssi: \"\"\n    };\n    let topic = `homeassistant/sensor/ruuvitag_${tmac}_${key}/config`\n \n// Configuration message\n    cmsg = {};\n    if (device_class[key]) cmsg.device_class = device_class[key];\n    if (unit_of_measurement[key]) cmsg.unit_of_measurement = unit_of_measurement[key];\n    if (state_class[key]) cmsg.state_class = state_class[key];\n    if (icon[key]) cmsg.icon = icon[key];\n    cmsg.name = `Ruuvitag ${tagname} ${key}`;\n    if (name[key]) cmsg.name = `Ruuvitag ${tagname} ${name[key]}`;\n//    cmsg.state_topic = `ruuvigw/sensor/ruuvitag_${tmac}_${key}/state`;\n// state topic for combined message\n    cmsg.state_topic = `ruuvigw/sensor/ruuvitag_${tmac}/state`;\n    cmsg.availability_topic = `ruuvigw/${gmac}/status`;\n    cmsg.unique_id = `ruuvitag_${tmac}_${key}`\n    cmsg.value_template = `{{value_json.${key}}}`\n\n// device\n    dmsg = {};\n    if (tagsAsDevices==true) {\n        dmsg.identifiers = tmac;\n        dmsg.name = \"Ruuvitag \" + tagname;\n        dmsg.manufacturer = \"Ruuvi\";\n        dmsg.model = \"Ruuvitag\";\n    } else {\n        dmsg.identifiers = gmac;\n        dmsg.name = \"RuuviGW\";\n        dmsg.manufacturer = \"Ruuvi\";\n        dmsg.model = \"RuuviGateway\";\n        \n    }\n    cmsg.device=dmsg;\n\t\n// Sendit\n    confmsg = {};\n    confmsg.payload = JSON.stringify(cmsg);\n    confmsg.topic=topic;\n    confmsg.retain=true;\n    confmsg.qos=0;\n    node.send(confmsg);\n\t\n\n}\n\n/*\nDo the thing\n\nruuvi/AA:BB:CC:DD:EE:FF/<SENSOR_MAC_ADDRESS>/GG:HH:II:JJ:KK:LL {\n        \"gw_mac\":       \"AA:BB:CC:DD:EE:FF\",\n        \"rssi\": -71,\n        \"aoa\":  [],\n        \"gwts\": \"1638131887\",\n        \"ts\":   \"1638131886\",\n        \"data\": \"0201061BFF9904050E0030BFC2DCFEAC03B4FFDCA1B6965F41D9CDCA5A5182\",\n        \"coords\":       \"\"\n}\nruuvi/AA:BB:CC:DD:EE:FF/<SENSOR_MAC_ADDRESS>/gw_status {\"state\": \"online\"}\n\n\n*/\n\n\n// Send status message based on Ruuvi Gateway status. Current Gateway firmware does not seem to send last will\n// so no offline message receved, Maybe later\nif (msg.topic.endsWith(\"gw_status\")) {\n    let gwmac=parseMacFromStatusMqttTopic(msg.topic);\n    let amsg = {};\n    amsg.topic = `ruuvigw/${gwmac}/status`;\n    amsg.payload = msg.payload.state;\n    node.send(amsg);\n    return null;\n}\n\n// Start extracting message\nisMqtt = true;\nlet mqttManufacturerStringStart = 10;\nmanufacturerDataString = msg.payload.data.substring(mqttManufacturerStringStart);\n\nlet manufacturerIdStart = 0;\nlet manufacturerIdEnd = 4;\n\n// Ruuvi manufacturer ID is 0x0499 but is little endian for some reason\nlet ruuviTagId = \"9904\";\n\n// Ignore any non-Ruuvi tags\nif (manufacturerDataString.substring(manufacturerIdStart, manufacturerIdEnd) != ruuviTagId) {\n    return null;\n}\nlet ruuviData = parseRuuviData(manufacturerDataString);\nif (!ruuviData) {\n    return null;\n}\n\n//Get mac and tagname\nlet bmac = parseMacFromMqttTopic(msg.topic);\nlet gwmac = bmac[0];\nlet tagmac = bmac[1];\n\nruuviData.mac = tagmac;\nruuviData.rssi = msg.payload.rssi;\n\n// Remove semicolons from mac\nlet re = /:/gi;\nvar regmac = tagmac.replace(re,\"\");\nvar tagname = regmac;\n\n// Use tagname is set\nif (tags[tagmac]) tagname = tags[tagmac];\n\n//  Check if config message is already sent.\n//  Resend every 10 minutes\nvar init =context.get(regmac)|1;\nvar lastmsg = context.get(\"LM\"+regmac)|1;\nvar lastconf = context.get(\"lastconf\")|1;\nlet ms = Date.now()/1000;\n\nif (lastconf+(60*1)<ms){\n    init=2;\n    context.set(\"lastconf\",ms);\n}\n\n/*\nThis is basically what we have after we have parsed the whole message\n}\n\"payload\": {\n\t\"temperature\": 16.51,\n\t\"humidity\": 37.9,\n\t\"pressure\": 98316,\n\t\"accelerationX\": -340,\n\t\"accelerationY\": 952,\n\t\"accelerationZ\": -36,\n\t\"battery\": 2881,\n\t\"txPower\": -18,\n\t\"movementCounter\": 150,\n\t\"sequenceCounter\": 1862,\n\t\"mac\": \"GG:HH:II:JJ:KK:LL\",\n\t\"rssi\": -65\n}\n*/\n// If init for this tag then send config. Should we send it regularly? \nif (init<3) {\n    for(var k in ruuviData) {\n        sendConfig(regmac,gwmac,tagname,k);\n    }\n    let amsg = {};\n    amsg.topic = `ruuvigw/${gwmac}/status`;\n    amsg.payload = \"online\";\n    node.send(amsg);\n//      Do not send state message for the very first config message.\n    node.log(regmac+\" init:\"+init);\n    if (init==1) {\n        context.set(regmac,2);\n        return;\n    }\n    context.set(regmac,3);\n}\n\n// Send state messages. Should we use combined message instead?\n// Rate limit the mesages to xx seconds\nif (lastmsg+60<ms) {\n    context.set(\"LM\"+regmac,ms);\n//    for(var l in ruuviData) {\n//        sendState(regmac,l,ruuviData[l]);\n//    }\n    sendCombinedState(regmac,ruuviData);\n}\n\n\n// Store tag mac to context so we do not resend.\n\n//msg.init=init;\n//msg.payload = JSON.stringify(ruuviData);\n//context.set(regmac,2);\n\n//return msg;\n\n\n","outputs":1,"noerr":0,"initialize":"// Code added here will be run once\n// whenever the node is started.\ncontext.set(\"init\", 1)","finalize":"","libs":[],"x":440,"y":240,"wires":[["686e8cc84a4a0aa0","db4d00a5ee2a8f15"]]},{"id":"db4d00a5ee2a8f15","type":"debug","z":"a60a112bcce56655","name":"","active":true,"tosidebar":true,"console":false,"tostatus":false,"complete":"true","targetType":"full","statusVal":"","statusType":"auto","x":650,"y":300,"wires":[]},{"id":"eba1f7cbc518a391","type":"json","z":"a60a112bcce56655","name":"","property":"payload","action":"","pretty":false,"x":270,"y":240,"wires":[["19404d9bb6b5650c"]]},{"id":"ac9201dc6297268e","type":"mqtt in","z":"a60a112bcce56655","name":"Ruuvi","topic":"ruuvi/#","qos":"2","datatype":"auto","broker":"442d554d.c106dc","nl":false,"rap":true,"rh":0,"inputs":0,"x":100,"y":240,"wires":[["eba1f7cbc518a391"]]},{"id":"686e8cc84a4a0aa0","type":"mqtt out","z":"a60a112bcce56655","name":"send to ha","topic":"","qos":"","retain":"","respTopic":"","contentType":"","userProps":"","correl":"","expiry":"","broker":"442d554d.c106dc","x":670,"y":220,"wires":[]},{"id":"442d554d.c106dc","type":"mqtt-broker","name":"Local","broker":"127.0.0.1","port":"1883","clientid":"","autoConnect":true,"usetls":false,"compatmode":false,"protocolVersion":4,"keepalive":"60","cleansession":true,"birthTopic":"","birthQos":"0","birthPayload":"","closeTopic":"","closeQos":"0","closePayload":"","willTopic":"","willQos":"0","willPayload":""}]